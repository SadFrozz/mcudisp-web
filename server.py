import mido
import threading
import time
from flask import Flask, render_template
from flask_socketio import SocketIO
from pythonosc.dispatcher import Dispatcher
from pythonosc.osc_server import BlockingOSCUDPServer

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
SEARCH_TERM = 'BCF2000'
BEHRINGER_SYSEX_ID = (0, 32, 50, 0, 20, 120)
HOST_IP = '0.0.0.0'
OSC_IP = "127.0.0.1"
OSC_PORT = 9000
WEB_PORT = 5000

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
app = Flask(__name__)
socketio = SocketIO(app)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–π
play_state = False
record_state = False
function_names = []
functions_available = False # –§–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω –ª–∏ —Ñ–∞–π–ª func.txt

@app.route('/')
def index():
    return render_template('index.html')

def load_function_names():
    """–ß–∏—Ç–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞ func.txt –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏."""
    global function_names, functions_available
    try:
        with open('func.txt', 'r', encoding='utf-8') as f:
            lines = [line.strip() for line in f.readlines()]
            function_names = lines[:8] # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 8 —Å—Ç—Ä–æ–∫
        while len(function_names) < 8:
            function_names.append("---")
        functions_available = True # –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –∏ –ø—Ä–æ—á–∏—Ç–∞–Ω
        print(f"‚úÖ –§—É–Ω–∫—Ü–∏–∏ F1-F8 —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {function_names}")
    except FileNotFoundError:
        print("‚ö†Ô∏è –§–∞–π–ª func.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–µ–∫—Ü–∏—è F-–∫–ª–∞–≤–∏—à –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç–∞.")
        function_names = []
        functions_available = False # –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ func.txt: {e}")
        function_names = []
        functions_available = False # –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞

@socketio.on('connect')
def handle_connect():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏ —Ñ–ª–∞–≥) –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É."""
    print("üîå –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è. –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö.")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏—è, –∏ —Ñ–ª–∞–≥, –Ω—É–∂–Ω–æ –ª–∏ –∏—Ö –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    socketio.emit('update_function_names', {'names': function_names, 'available': functions_available})

# --- –õ–æ–≥–∏–∫–∞ OSC ---
def osc_handler(address, *args):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ OSC, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è."""
    global play_state, record_state
    if address == "/frames/str":
        if args: socketio.emit('update_timecode', {'timecode': args[0]})
    elif address == "/play":
        play_state = bool(args[0]); update_transport_status()
    elif address == "/record":
        record_state = bool(args[0]); socketio.emit('update_record_status', {'is_recording': record_state}); update_transport_status()

def update_transport_status():
    status_text = "‚ñ† STOP"
    if play_state: status_text = "‚ñ∂ PLAY"
    socketio.emit('update_playback_status', {'status_text': status_text})

def start_osc_server():
    dispatcher = Dispatcher()
    dispatcher.set_default_handler(osc_handler)
    server = BlockingOSCUDPServer((OSC_IP, OSC_PORT), dispatcher)
    print(f"üéß OSC-—Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ {OSC_IP}:{OSC_PORT}")
    server.serve_forever()

# --- –õ–æ–≥–∏–∫–∞ MIDI ---
def find_and_listen_midi():
    target_port_name = None; display_data = { 'line1': ' ' * 56, 'line2': ' ' * 56 }
    while True:
        if not target_port_name:
            try:
                available_ports = mido.get_input_names()
                for port in available_ports:
                    if SEARCH_TERM in port:
                        target_port_name = port; print(f"‚úÖ MIDI-–ø–æ—Ä—Ç –Ω–∞–π–¥–µ–Ω: '{target_port_name}'"); break
            except Exception as e: print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            if not target_port_name: time.sleep(5); continue
        try:
            with mido.open_input(target_port_name) as inport:
                print(f"üéß MIDI-—Å–ª—É—à–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É: '{target_port_name}'")
                for msg in inport:
                    if msg.type == 'sysex':
                        data = msg.data
                        if tuple(data[0:len(BEHRINGER_SYSEX_ID)]) == BEHRINGER_SYSEX_ID:
                            offset = data[len(BEHRINGER_SYSEX_ID)]; text_data = ''.join(map(chr, data[len(BEHRINGER_SYSEX_ID)+1:]))
                            if offset < 56:
                                current = list(display_data['line1']);
                                for i, char in enumerate(text_data):
                                    if offset + i < len(current): current[offset + i] = char
                                display_data['line1'] = "".join(current)
                            else:
                                offset -= 56; current = list(display_data['line2']);
                                for i, char in enumerate(text_data):
                                    if offset + i < len(current): current[offset + i] = char
                                display_data['line2'] = "".join(current)
                            socketio.emit('update_display', {'line1': display_data['line1'], 'line2': display_data['line2']})
        except (IOError, OSError) as e:
            print(f"üîå MIDI-–ø–æ—Ä—Ç '{target_port_name}' –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω. –û—à–∏–±–∫–∞: {e}"); target_port_name = None; time.sleep(2)

if __name__ == '__main__':
    load_function_names() # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    midi_thread = threading.Thread(target=find_and_listen_midi); midi_thread.daemon = True; midi_thread.start()
    osc_thread = threading.Thread(target=start_osc_server); osc_thread.daemon = True; osc_thread.start()
    print(f"üöÄ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{HOST_IP}:{WEB_PORT}")
    socketio.run(app, host=HOST_IP, port=WEB_PORT, allow_unsafe_werkzeug=True)

