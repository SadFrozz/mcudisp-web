import mido
import threading
import time
from flask import Flask, render_template
from flask_socketio import SocketIO
from pythonosc.dispatcher import Dispatcher
from pythonosc.osc_server import BlockingOSCUDPServer

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –î–û–õ–ñ–ï–ù –£–ö–ê–ó–ê–¢–¨ –ó–î–ï–°–¨ –¢–û–ß–ù–û–ï –ò–ú–Ø –°–í–û–ï–ì–û MIDI-–ü–û–†–¢–ê
# –£–∑–Ω–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ, –∑–∞–ø—É—Å—Ç–∏–≤ —Ñ–∞–π–ª list_ports.py
SEARCH_TERM = 'BCF2000'
BEHRINGER_SYSEX_ID = (0, 32, 50, 0, 20, 120)
HOST_IP = '0.0.0.0'
OSC_IP = "127.0.0.1"
OSC_PORT = 9000
WEB_PORT = 5000

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
app = Flask(__name__)
socketio = SocketIO(app)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
play_state = False
record_state = False

@app.route('/')
def index():
    return render_template('index.html')

# --- –õ–æ–≥–∏–∫–∞ OSC ---
def timecode_handler(address, *args):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∞–π–º–∫–æ–¥–∞."""
    if args:
        socketio.emit('update_timecode', {'timecode': args[0]})

def play_handler(address, *args):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ Play."""
    global play_state
    play_state = bool(args[0])
    update_transport_status()

def record_handler(address, *args):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ Record."""
    global record_state
    record_state = bool(args[0])
    socketio.emit('update_record_status', {'is_recording': record_state})
    update_transport_status()

def update_transport_status():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
    status_text = "‚ñ† STOP"
    if play_state:
        status_text = "‚ñ∂ PLAY"
    
    socketio.emit('update_playback_status', {'status_text': status_text})

def start_osc_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –¢–û–õ–¨–ö–û –Ω—É–∂–Ω—ã—Ö OSC-—Å–æ–æ–±—â–µ–Ω–∏–π."""
    dispatcher = Dispatcher()
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å –∫ —Å–≤–æ–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    dispatcher.map("/frames/str", timecode_handler)
    dispatcher.map("/play", play_handler)
    dispatcher.map("/record", record_handler)

    server = BlockingOSCUDPServer((OSC_IP, OSC_PORT), dispatcher)
    print(f"üéß OSC-—Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ {OSC_IP}:{OSC_PORT}")
    server.serve_forever()

# --- –õ–æ–≥–∏–∫–∞ MIDI (–¥–ª—è –¥–∏—Å–ø–ª–µ—è) ---
def find_and_listen_midi():
    target_port_name = None; display_data = { 'line1': ' ' * 56, 'line2': ' ' * 56 }
    while True:
        if not target_port_name:
            try:
                available_ports = mido.get_input_names()
                for port in available_ports:
                    if SEARCH_TERM in port:
                        target_port_name = port; print(f"‚úÖ MIDI-–ø–æ—Ä—Ç –Ω–∞–π–¥–µ–Ω: '{target_port_name}'"); break
            except Exception as e: print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            if not target_port_name: time.sleep(5); continue
        try:
            with mido.open_input(target_port_name) as inport:
                print(f"üéß MIDI-—Å–ª—É—à–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É: '{target_port_name}'")
                socketio.emit('status', {'connected': True, 'message': f"Listening to: {target_port_name}"})
                for msg in inport:
                    if msg.type == 'sysex':
                        data = msg.data
                        if tuple(data[0:len(BEHRINGER_SYSEX_ID)]) == BEHRINGER_SYSEX_ID:
                            offset = data[len(BEHRINGER_SYSEX_ID)]; text_data = ''.join(map(chr, data[len(BEHRINGER_SYSEX_ID)+1:]))
                            if offset < 56:
                                current = list(display_data['line1']);
                                for i, char in enumerate(text_data):
                                    if offset + i < len(current): current[offset + i] = char
                                display_data['line1'] = "".join(current)
                            else:
                                offset -= 56; current = list(display_data['line2']);
                                for i, char in enumerate(text_data):
                                    if offset + i < len(current): current[offset + i] = char
                                display_data['line2'] = "".join(current)
                            socketio.emit('update_display', {'line1': display_data['line1'], 'line2': display_data['line2']})
        except (IOError, OSError) as e:
            print(f"üîå MIDI-–ø–æ—Ä—Ç '{target_port_name}' –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω. –û—à–∏–±–∫–∞: {e}"); target_port_name = None; time.sleep(2)

if __name__ == '__main__':
    midi_thread = threading.Thread(target=find_and_listen_midi); midi_thread.daemon = True; midi_thread.start()
    osc_thread = threading.Thread(target=start_osc_server); osc_thread.daemon = True; osc_thread.start()
    print(f"üöÄ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{HOST_IP}:{WEB_PORT}")
    socketio.run(app, host=HOST_IP, port=WEB_PORT, allow_unsafe_werkzeug=True)